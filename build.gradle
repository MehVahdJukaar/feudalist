plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1' apply false
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    minecraft = minecraft_version
}

static def listGameVersions(String string1, String string2) {
    // Extract the base version and the starting and ending patch numbers
    String baseVersion = string1
    int startPatch = 0
    int endPatch = Integer.parseInt(string2.split('\\.')[2])

    // Initialize an array to hold the generated versions
    def versions = []

    // Add the base version (string1) to the array
    versions << baseVersion

    // Generate and add the patch versions
    for (int i = startPatch + 1; i <= endPatch; i++) {
        versions << "${baseVersion}.${i}"
    }

    // Return the generated versions
    return versions
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            it.officialMojangMappings {
                setNameSyntheticMembers(false)
            }
            it.parchment("org.parchmentmc.data:parchment-${parchment_version}")
        }
    }

    var env = System.getenv()
    var modLoader = name

    var changelogFile = rootProject.file("changelog.md")
    var changelogText = changelogFile.exists() ? changelogFile.text : ""

    var versions = listGameVersions(minecraft_min_version, minecraft_version)

    if (env.MODRINTH_TOKEN) {
        modrinth {
            uploadFile = tasks.remapJar
            gameVersions = versions
            if (modLoader == "forge") {
                loaders = ["neoforge"]
            } else loaders = [modLoader]
            changelog = changelogText
            versionNumber = modLoader +"_"+ mod_version
            versionType = release_type
            if (modLoader == "fabric") {
                projectId = modrinth_id
                dependencies {
                    required.project "fabric-api"
                }
            } else {
                projectId = modrinth_id
                dependencies {
                }
            }
        }
    }

    if (env.CURSEFORGE_TOKEN) {
        curseforge {
            apiKey = env.CURSEFORGE_TOKEN
            project {
                changelog = changelogText
                releaseType = release_type
                for (var ver : versions){
                    addGameVersion ver
                }


                if (modLoader == "neoforge") {
                    addGameVersion("NeoForge")
                } else addGameVersion modLoader.capitalize()

                mainArtifact(tasks.remapJar)

                if (modLoader == "fabric") {
                    id = project_id
                    relations {
                        requiredDependency "fabric-api"
                    }
                } else {
                    id = project_id
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = mod_id
    version = mod_version
    group = mod_group_id


    repositories {
        flatDir {
            dirs 'mods'
        }

        mavenCentral()
        mavenLocal()

        maven { url "https://maven.parchmentmc.org" }

        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
        }
        maven { url 'https://jitpack.io' }

        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }
        maven {
            url = 'https://maven.neoforged.net'
        }

        maven {
            url = "https://api.modrinth.com/maven"
        }
        maven { url = "https://mvn.devos.one/snapshots" }
        maven { url = "https://maven.tterrag.com/" } // Flywheel
        maven {
            url = "https://maven.blamejared.com/"
        }
        maven { // Reach Entity Attributes
            url = "https://maven.jamieswhiteshirt.com/libs-release"
            content { includeGroup("com.jamieswhiteshirt") }
        }
        maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
        maven { url = "https://mvn.devos.one/snapshots" } // Registrate
        maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
        maven { url = "https://harleyoconnor.com/maven" } // Dynamic Trees
        maven { url = "https://maven.theillusivec4.top/" } // Curios API
        maven { url = "https://maven.squiddev.cc" } // CC: Tweaked
        maven { url = "https://www.cursemaven.com" }
        maven { url = "https://api.modrinth.com/maven" }
        maven { url = "https://maven.saps.dev/releases" } // FTB Mods
        maven { url = "https://maven.architectury.dev" } // Arch API
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // NeoForge config api port, needed by ponder
        maven { url = "https://maven.tterrag.com/" } // Flywheel
        maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Porting Lib, Forge Tags, Milk Lib
        maven { url = "https://mvn.devos.one/releases/" }
        maven { url = "https://maven.misterpemodder.com/libs-release/" } // ShulkerBoxTooltip
        maven {
            url = "https://maven.createmod.net/"
        }

    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = rootProject.java_version.toInteger()
    }

    java {
        withSourcesJar()
    }
}


ext{
    replaceProperties = [
            minecraft_version    : minecraft_version,
            minecraft_min_version: minecraft_min_version,
            minecraft_max_version: minecraft_max_version,
            pack_format_number   : pack_format_number,

            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_credits          : mod_credits,
            mod_homepage         : mod_homepage,
            mod_github           : mod_github,

            neo_version          : neo_version,
            neo_version_range    : neo_version_range,
            loader_version_range : loader_version_range,
            moonlight_min_version: moonlight_min_version
    ]
}


task buildAndPublishAll {
    dependsOn ':clean'
    dependsOn ':build'
    dependsOn ':neoforge:curseforge'
    dependsOn ':neoforge:modrinth'
    dependsOn ':fabric:curseforge'
    dependsOn ':fabric:modrinth'
}

buildAndPublishAll.group = 'build'
buildAndPublishAll.description = 'Runs clean, build, and publish forge and fabric'

task buildAndPublishAllM {
    dependsOn buildAndPublishAll
    dependsOn ':publishToMavenLocal'
}

buildAndPublishAllM.group = 'build'
buildAndPublishAllM.description = 'Runs clean, build, publish forge and fabric and uploads to maven local'

